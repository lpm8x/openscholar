<?php

/**
 * @file
 * Hook implementations for the vsite module.
 */

use Drupal\bibcite_entity\Entity\ReferenceInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\vsite\Entity\GroupPresetInterface;
use Drupal\vsite\Entity\GroupPreset;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupInterface;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\vsite\Cache\VsiteCacheContext;

/**
 * Implements hook_modules_installed().
 */
function vsite_modules_installed(array $modules) {
  vsite_setup_new_apps();
}

/**
 * Sets up associations between app content and group types.
 *
 * @todo this needs work
 */
function vsite_setup_new_apps() {
  // TODO: Fix this so it doesn't block installs.
}

/**
 * Implements hook_views_data_alter().
 */
function vsite_views_data_alter(&$data) {
  $data['group_content']['current_vsite_filter'] = [
    'title' => t('Current Vsite Filter'),
    'filter' => [
      'title' => t('Current Vsite Filter'),
      'help' => 'Filters content on the current vsite',
      'field' => 'gid',
      'id' => 'vsite_current_filter',
    ],
  ];
  $data['groups']['subsite_vsite_filter'] = [
    'title' => t('Subsite Filter'),
    'filter' => [
      'title' => t('Subsite Filter'),
      'help' => 'Filters child sites on the current vsite',
      'field' => 'field_parent_site',
      'id' => 'vsite_subsite_filter',
    ],
  ];
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function vsite_pathauto_alias_alter(&$alias, array &$context) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  if ($vsiteContext->getActiveVsite()) {
    $purl = $vsiteContext->getActivePurl();
    $trimmed_alias = ltrim($alias, '/');
    $alias = '/' . $purl . '/' . $trimmed_alias;
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function vsite_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  if ($group = $vsiteContext->getActiveVsite()) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    $plugin_id = 'group_node:' . $entity->bundle();
    if ($entity->isNew() || !$group->getContentByEntityId($plugin_id, $entity->id())) {
      $form_state->set('group', $group);
      $form_state->set('group_content_enabler', 'group_node:' . $entity->bundle());
      foreach (Element::children($form['actions']) as $name) {

        // Skip buttons without submit handlers.
        if (empty($form['actions'][$name]['#submit'])) {
          continue;
        }

        // Skip buttons that do not properly build and save an entity.
        $submit = $form['actions'][$name]['#submit'];
        if (!in_array('::submitForm', $submit) || !in_array('::save', $submit)) {
          continue;
        }

        // If we are using the wizard, we need to substitute the entity save
        // handler in order to add the entity to the private temp store.
        $form['actions'][$name]['#submit'][] = 'group_content_entity_submit';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vsite_form_alter(&$form, FormStateInterface $formState, $form_id) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  if ($formState->getFormObject() instanceof EntityFormInterface) {

    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $formState->getFormObject()->getEntity();
    $entityTypeId = $entity->getEntityTypeId();
    /** @var \Drupal\group\Entity\GroupInterface $group */
    if ($group = $vsiteContext->getActiveVsite()) {
      $groupTypeId = $group->bundle();

      /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $groupContentEnabler */
      $groupContentEnabler = \Drupal::service('plugin.manager.group_content_enabler');
      $plugins = $groupContentEnabler->getGroupTypePluginMap();
      $availablePlugins = $plugins[$groupTypeId];

      $plugin_id = 'group_entity:' . $entity->getEntityTypeId();
      if (in_array($plugin_id, $availablePlugins) && ($entity->isNew() || !($group->getContentByEntityId($plugin_id, $entity->id())))) {
        $formState->set('group', $group);
        $formState->set('group_content_enabler', $plugin_id);
        foreach (Element::children($form['actions']) as $name) {

          // Skip buttons without submit handlers.
          if (empty($form['actions'][$name]['#submit'])) {
            continue;
          }

          // Skip buttons that do not properly build and save an entity.
          $submit = $form['actions'][$name]['#submit'];
          if (!in_array('::submitForm', $submit) || !in_array('::save', $submit)) {
            continue;
          }

          // If we are using the wizard, we need to substitute the entity save
          // handler in order to add the entity to the private temp store.
          $form['actions'][$name]['#submit'][] = 'group_content_entity_submit';
        }
      }
      $current_url = Url::fromRoute('<front>', [], ["absolute" => TRUE])->toString();
      $form['path']['widget'][0]['alias']['#field_prefix'] = $current_url;
      $purl = $vsiteContext->getActivePurl();
      $alias = $form['path']['widget'][0]['alias']['#default_value'];
      $alias_without_purl = preg_replace('$^/' . $purl . '$', '', $alias);
      $form['path']['widget'][0]['alias']['#default_value'] = $alias_without_purl;
      array_unshift($form['path']['widget'][0]['#element_validate'], 'vsite_node_alias_purl_element_validate');
    }
    $allowedSubSites = \Drupal::config('vsite.settings')->get('allowed_subsite_group_types');
    if (!empty($allowedSubSites) && $entityTypeId == 'group' && !in_array($entity->bundle(), $allowedSubSites)) {
      $form['field_parent_site']['#access'] = FALSE;
    }
  }
  elseif ($formState->getFormObject() instanceof ConfigFormBase && \Drupal::currentUser()->hasPermission('administer presets')) {
    if ($vsite = $vsiteContext->getActiveVsite()) {
      if ($vsite->hasField('field_preset') && !$vsite->get('field_preset')->isEmpty()) {
        $preset_id = $vsite->get('field_preset')->get(0)->getValue()['target_id'];
        $preset = GroupPreset::load($preset_id);
        $form['actions']['submitToPreset'] = [
          '#type' => 'submit',
          '#value' => t('Save To Preset @label', ['@label' => $preset->label()]),
          '#submit' => [
            [$preset, 'saveConfig'],
          ],
        ];
      }
    }
  }
}

/**
 * Put back vsite purl to alias value to handle right validate.
 */
function vsite_node_alias_purl_element_validate(array &$element, FormStateInterface $form_state) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');
  $element['alias']['#value'] = '/' . $vsiteContext->getActivePurl() . $element['alias']['#value'];
}

/**
 * Implements hook_views_pre_build().
 */
function vsite_views_pre_build(ViewExecutable $view) {
  if (!empty($view->filter['current_vsite_filter'])) {
    /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
    $vsiteContext = \Drupal::service('vsite.context_manager');
    if ($vsiteContext->getActiveVsite()) {
      $view->element['#cache']['contexts'][] = 'vsite:' . $vsiteContext->getActiveVsite()->id();
    }
    else {
      $view->element['#cache']['contexts'][] = 'vsite:none';
    }
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function vsite_toolbar_alter(&$toolbar) {
  $toolbar['toolbar_menu_control_panel']['tray']['toolbar_menu_control_panel_links']['#pre_render'][] = '_vsite_prerender_control_panel_links';
}

/**
 * Adds the current vsite to list of this build array's cache contexts.
 *
 * @param array $element
 *   The full toolbar render array.
 *
 * @return array
 *   The modified element
 */
function _vsite_prerender_control_panel_links(array $element) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');
  $metadata = CacheableMetadata::createFromRenderArray($element['toolbar_menu_control-panel']);
  if ($vsiteContext->getActiveVsite()) {
    $metadata->addCacheContexts(['vsite:' . $vsiteContext->getActiveVsite()->id()]);
  }
  else {
    $metadata->addCacheContexts([VsiteCacheContext::VSITE_CACHE_CONTEXTS_NONE]);
  }

  $metadata->applyTo($element['toolbar_menu_control-panel']);

  return $element;
}

/**
 * Implements hook_library_info_alter().
 */
function vsite_library_info_alter(&$libraries, $extension) {
  if ($extension == 'core' && isset($libraries['drupal.ajax'])) {
    $path = '/' . drupal_get_path('module', 'vsite') . '/js/vsite.ajaxContext.js';
    $libraries['drupal.ajax']['js'][$path] = [
      'weight' => 0,
    ];
  }
}

/**
 * Implements hook_page_attachments().
 */
function vsite_page_attachments(array &$attachments) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface $vsite */
  if ($vsite = $vsiteContext->getActiveVsite()) {
    $attachments['#attached']['drupalSettings']['spaces'] = [
      'id' => $vsite->id(),
      'label' => $vsite->label(),
      'purl' => $vsiteContext->getActivePurl(),
      'url' => $vsiteContext->getAbsoluteUrl(),
    ];
  }
}

/**
 * Get all group id that related with field parent site.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   Parent group entity.
 *
 * @return array|int
 *   List of the related and parent gids.
 */
function _vsite_get_group_and_subsite_ids(GroupInterface $group) {
  $query = \Drupal::entityQuery('group')
    ->condition('field_parent_site', $group->id());

  $gids = $query->execute();
  // Add parent group to list.
  $gids[$group->id()] = $group->id();
  return $gids;
}

/**
 * Implements hook_group_create().
 */
function vsite_group_create(GroupInterface $group) {
  if ($group->hasField('field_preset') && !$group->get('field_preset')->isEmpty()) {
    $preset_id = $group->get('field_preset')->get(0)->getValue()['target_id'];
    if ($preset = GroupPreset::load($preset_id)) {
      $tasks = $preset->getCreationTasks();
      $batch = [
        'title' => t('Setting up your new OpenScholar site'),
        'operations' => [],
        'finished' => '_vsite_batch_finished',
        'init_message' => t('Preparing for setup'),
        'progress_message' => t('Set up tasks @current of @total completed. Estimated time for completion is @estimate'),
      ];
      foreach ($tasks as $t) {
        $batch['operations'][] = [
          '_vsite_process_preset_task',
          [$group, $preset, $t],
        ];
      }
      batch_set($batch);
    }
  }
}

/**
 * Performs a single preset task.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   The group being operated on.
 * @param \Drupal\vsite\Entity\GroupPresetInterface $preset
 *   The preset the group is using.
 * @param string $task
 *   The task to perform.
 *
 * @return array|null
 *   The result of the batch or null if the task was not callable
 */
function _vsite_process_preset_task(GroupInterface $group, GroupPresetInterface $preset, string $task, &$context) {
  if (is_callable($task)) {
    return call_user_func_array($task, [$group, $preset, &$context]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function vsite_node_view_alter(array &$build, NodeInterface $entity, EntityViewDisplayInterface $display) {
  // Makes sure that the destination parameter in contextual links in node
  // full-views are correct.
  // For edit, it should direct to the node page.
  // For delete, it should direct to the node's listing.
  if ($build['#view_mode'] === 'full') {
    $build['#attached']['library'][] = 'vsite/contextualFullView';
    $build['#attached']['drupalSettings']['entitySetting'] = [
      'type' => $entity->getEntityTypeId(),
      'bundle' => $entity->bundle(),
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function vsite_bibcite_reference_view_alter(array &$build, ReferenceInterface $entity, EntityViewDisplayInterface $display) {
  // Makes sure that the destination parameter in contextual links in
  // publication full-view is correct.
  // For edit, it should direct to the publication's full-view.
  // For delete, it should direct to the publications listing.
  if (in_array($build['#view_mode'], ['citation', 'teaser'])) {
    $build['#attached']['library'][] = 'vsite/contextualFullView';
    $build['#attached']['drupalSettings']['entitySetting'] = [
      'type' => $entity->getEntityTypeId(),
      'bundle' => $entity->bundle(),
    ];
  }
}

/**
 * Implements hook_views_post_render().
 */
function vsite_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  // Makes sure that destination parameter in contextual links in listings are
  // correct. They should be directing to the listing itself.
  $view->element['#attached']['library'][] = 'vsite/contextualList';
}

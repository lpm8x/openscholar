<?php

/**
 * @file
 * Hook implementations for the vsite_preset module.
 */

use Drupal\group\Entity\GroupInterface;
use Drupal\vsite_preset\Entity\GroupPreset;
use Drupal\vsite_preset\Entity\GroupPresetInterface;
use League\Csv\Reader;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_group_create().
 */
function vsite_preset_group_insert(GroupInterface $group) {
  // TODO , check if hook_insert is needed.
  if ($group->hasField('field_preset') && !$group->get('field_preset')->isEmpty()) {
    $preset_id = $group->get('field_preset')->get(0)->getValue()['target_id'];
    if ($preset = GroupPreset::load($preset_id)) {
      $fileArr = $preset->getCreationFiles();
      // If for this group type no preset files exists then we need not proceed.
      if (!$fileArr[$group->getGroupType()->id()]) {
        return;
      }
      if (isset($fileArr[$group->getGroupType()->id()])) {
        $uriArr = array_keys($fileArr[$group->getGroupType()->id()]);
      }
      // TODO Review and see what could be changed for better.
      $batch = [
        'title' => t('Setting up your new OpenScholar site'),
        'operations' => [],
        'finished' => '_vsite_preset_batch_finished',
        'init_message' => t('Preparing for setup'),
        'progress_message' => t('Set up tasks @current of @total completed. Estimated time for completion is @estimate'),
      ];

      foreach ($uriArr as $uri) {
        $batch['operations'][] = [
          '_vsite_preset_process_preset_task',
          [$group, $preset, $uri],
        ];
      }
    }
    batch_set($batch);
  }
}

/**
 * Performs a single preset task.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   The group being operated on.
 * @param \Drupal\vsite_preset\Entity\GroupPresetInterface $preset
 *   The preset the group is using.
 * @param string $uri
 *   The file uri.
 * @param mixed $context
 *   The batch context.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _vsite_preset_process_preset_task(GroupInterface $group, GroupPresetInterface $preset, $uri, &$context) {
  $alias = $group->get('path')->getValue()[0]['alias'];
  $context['results']['alias'] = $alias;
  $parsedUri = explode('/', $uri);
  $count = count($parsedUri);
  $entityType = $parsedUri[$count - 3];
  $bundle = $parsedUri[$count - 2];

  $header = NULL;
  $data = [];

  $csv = Reader::createFromPath($uri, 'r');
  foreach ($csv as $row) {
    if (!$header) {
      $header = $row;
    }
    else {
      $data[] = array_combine($header, $row);
    }
  }

  // Todo Revamp all functionality in this method and use helper methods.
  switch ($entityType) {
    case 'node':
      foreach ($data as $row) {
        $node = \Drupal::entityTypeManager()->getStorage($entityType)->create([
          'type' => $bundle,
          'title' => $row['Title'],
        ]);
        $node->save();
        $group->addContent($node, "group_node:$bundle");
        /** @var \Drupal\Core\Path\AliasStorageInterface $path_alias_storage */
        $path_alias_storage = \Drupal::service('path.alias_storage');
        $exist_alias = $path_alias_storage->load(['source' => '/node/' . $node->id()]);
        // Fix group alias of the node.
        $path_alias_storage->save('/node/' . $node->id(), '/[vsite:' . $group->id() . ']' . $exist_alias['alias'], 'en', $exist_alias['pid']);
      }
      break;

    case 'block_content':
      foreach ($data as $row) {
        $block = \Drupal::entityTypeManager()->getStorage($entityType)->create([
          'type' => $bundle,
          'info' => $row['Info'],
          'field_widget_title' => $row['Title'],
          'body' => $row['Body'],
        ]);
        $block->save();
        // TODO add block to vsite and checkout about placement.
      }
  }

  // TODO Enable apps and other tasks to be handled.
}

/**
 * Vsite creation finished callback.
 */
function _vsite_preset_batch_finished($success, $results, $operations) {
  // TODO if any messages need to be displayed as per results.
  return new RedirectResponse($results['alias']);
}

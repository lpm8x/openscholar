<?php

/**
 * @file
 * OS app access.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResultNeutral;

/**
 * Entity create access.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account.
 * @param array $context
 *   Context.
 * @param string $bundle
 *   The bundle.
 */
function os_app_access_entity_create_access(AccountInterface $account, array $context, $bundle) {
  switch ($context['entity_type_id']) {
    case 'node':
      return _os_app_access_node_type_access($account, $bundle);

    case 'bibcite_reference':
      /** @var \Drupal\vsite\Plugin\AppManangerInterface $app_manager */
      $app_manager = Drupal::service('vsite.app.manager');
      /** @var \Drupal\vsite\AppInterface $app */
      $app = $app_manager->createInstance('publications');
      /** @var \Drupal\os_app_access\Access\AppAccess $app_access */
      $app_access = \Drupal::service('os_app_access.app_access');
      return $app_access->access($account, $app->getPluginId());

    default:
      break;
  }
}

/**
 * Node access.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node.
 * @param string $op
 *   Operation name.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account.
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 *   The access result.
 */
function os_app_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
  return _os_app_access_node_type_access($account, $node->bundle());
}

/**
 * Checks node type access.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The user account.
 * @param string $node_type
 *   The node type.
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 *   The access result.
 */
function _os_app_access_node_type_access(AccountInterface $account, $node_type) {
  /** @var \Drupal\os_app_access\Access\AppAccess $app_access */
  $app_access = \Drupal::service('os_app_access.app_access');
  /** @var \Drupal\vsite\Plugin\AppManangerInterface $app_manager */
  $app_manager = Drupal::service('vsite.app.manager');
  $app = $app_manager->getAppForBundle($node_type);
  if ($app) {
    return $app_access->access($account, $app);
  }
  return new AccessResultNeutral();
}

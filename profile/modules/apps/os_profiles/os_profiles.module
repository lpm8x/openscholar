<?php

/**
 * @file
 * Profiles and person customisations.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_alter().
 */
function os_profiles_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_person_form' || $form_id === 'node_person_edit_form') {
    $form['title']['#access'] = FALSE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fill hidden Title field with full name derived from other fields.
 */
function os_profiles_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'person') {
    $honorific = $entity->field_honorific->value;
    $first_name = $entity->field_first_name->value;
    $middle_name = $entity->field_middle_name->value;
    $last_name = $entity->field_last_name->value;
    $full_name = ($honorific ? $honorific . ' ' : '') . ($first_name ? $first_name . ' ' : '') . ($middle_name ? $middle_name . ' ' : '') . $last_name;
    $entity->setTitle($full_name);
  }
}

/**
 * Implements hook_theme().
 */
function os_profiles_theme($existing, $type, $theme, $path) {
  return [
    'os_profiles_example_hover_popup' => [
      'variables' => [
        'counter' => 0,
        'label' => '',
        'profile_example' => '',
      ],
    ],
    'os_profiles_example_title' => [
      'variables' => [],
    ],
    'os_profiles_example_teaser' => [
      'variables' => [
        'image' => '',
      ],
    ],
    'os_profiles_example_sidebar_teaser' => [
      'variables' => [
        'image' => '',
      ],
    ],
    'os_profiles_example_slide_teaser' => [
      'variables' => [],
    ],
    'os_profiles_example_no_image_teaser' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function os_profiles_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  // Node bundle is person.
  if ($node->bundle() != 'person') {
    return;
  }
  $content = $variables['content'];
  $config = Drupal::config('os_profiles.settings');

  // Current view mode has image.
  // Person image is empty.
  // Default image is not hidden.
  if (in_array($variables['view_mode'], ['teaser', 'sidebar_teaser'])
    && empty($content['field_photo_person']['#items'])
    && !$config->get('disable_default_image')) {

    if ($default_image_fid = $config->get('default_image_fid')) {
      $file = File::load($default_image_fid);
      $image_vars = [
        'style_name' => 'crop_photo_person',
        'uri' => $file->getFileUri(),
      ];

      // The image.factory service will check if our image is valid.
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $image_vars['width'] = $image->getWidth();
        $image_vars['height'] = $image->getHeight();
      }
      else {
        $image_vars['width'] = $image_vars['height'] = NULL;
      }

      $default_image_render_array = [
        '#theme' => 'image_style',
        '#width' => $image_vars['width'],
        '#height' => $image_vars['height'],
        '#style_name' => $image_vars['style_name'],
        '#uri' => $image_vars['uri'],
      ];
    }
    else {
      // Use default image.
      $default_image_render_array = [
        '#theme' => 'image',
        '#uri' => file_create_url(drupal_get_path('theme', 'os_base') . '/images/person-default-image.png'),
      ];
    }
    $variables['content']['field_photo_person'][0] = $default_image_render_array;
  }

  if (!empty($content['field_phone'][0])) {
    $variables['content']['field_phone']['#title'] = t('p', ['context' => 'Field phone title']);
  }
  if (!empty($content['field_email'][0]['#url'])) {
    $url_attributes = [
      'title' => t("@title's e - mail", ['@title' => $node->getTitle()]),
    ];
    $variables['content']['field_email'][0]['#url']->setOption('attributes', $url_attributes);
  }
  /** @var \Drupal\vsite\Plugin\VsiteContextManager $vsite_context_manager */
  $vsite_context_manager = Drupal::service('vsite.context_manager');
  // Mark person nodes without images.
  // Invalidate if profile settings are changed.
  if ($node->bundle() == 'person' && empty($content['field_photo_person']['#items']) && $group = $vsite_context_manager->getActiveVsite()) {
    $variables['#cache']['tags'][] = 'node-person-without-image:' . $group->id();
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function os_profiles_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($entity->getEntityType() != 'node' && $entity->bundle() != 'person') {
    return;
  }
  /** @var \Symfony\Component\HttpFoundation\ParameterBag $attributes */
  $attributes = Drupal::request()->attributes;
  $parameters = $attributes->all();
  if (empty($parameters['_route']) || $parameters['_route'] != 'view.people.page_1') {
    return;
  }
  $profiles_view_mode = Drupal::config('os_profiles.settings')->get('display_type');
  if (empty($profiles_view_mode)) {
    return;
  }
  $view_mode = $profiles_view_mode;
}

/**
 * Implements hook_views_pre_build().
 */
function os_profiles_views_pre_build(ViewExecutable $view) {
  if ($view->id() != 'people' || $view->current_display != 'page_1') {
    return;
  }
  /** @var \Drupal\vsite\Plugin\VsiteContextManager $vsite_context_manager */
  $vsite_context_manager = Drupal::service('vsite.context_manager');
  // Mark people views and invalidate if display type changed.
  if ($group = $vsite_context_manager->getActiveVsite()) {
    $view->storage->addCacheTags(['view:people:page:' . $group->id()]);
  }
}

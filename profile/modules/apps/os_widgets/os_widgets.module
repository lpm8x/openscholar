<?php

/**
 * @file
 * OS widgets.
 */

use Drupal\block_content\BlockContentForm;
use Drupal\Core\Render\Element;
use Drupal\os_widgets\Plugin\DisplayVariant\PlaceBlockPageVariant;
use Drupal\Core\Url;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\os_widgets\Entity\OsBlockContent;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_library_info_alter().
 */
function os_widgets_library_info_alter(&$libraries, $extension) {
  if ($extension == 'os_widgets') {
    if (isset($libraries['layout'])) {
      $libraries['layout']['drupalSettings']['path']['layout']['saveLayout'] = 'cp/layout/save';
      $libraries['layout']['drupalSettings']['path']['layout']['resetLayout'] = 'cp/layout/reset';
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function os_widgets_entity_type_alter(array &$entity_types) {
  $entity_types['block_content']->setHandlerClass('view_builder', 'Drupal\os_widgets\OsBlockContentViewBuilder');
  $entity_types['block_content']->setClass(OsBlockContent::class);
}

/**
 * Implements hook_preprocess_node().
 */
function os_widgets_preprocess_node(&$variables) {
  if (!empty($variables['elements']['os_widgets_hide_node_title'])) {
    $variables['label']['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function os_widgets_preprocess_block(&$variables) {
  if (!empty($variables['content']['#extra_classes'])) {
    foreach ($variables['content']['#extra_classes'] as $class) {
      $variables['attributes']['class'][] = $class;
    }
  }
}

/**
 * Implements hook_preprocess_links__toolbar_user().
 *
 * Add an extra item for link OS twitter.
 */
function os_widgets_preprocess_links__toolbar_user(&$vars) {
  $links_keys = array_keys($vars['links']);
  $last_key = end($links_keys);
  $last_item = array_pop($vars['links']);
  $vars['links']['twitter_status']['link'] = [
    '#type' => 'link',
    '#title' => t('Updates on twitter'),
    '#url' => Url::fromUri('https://twitter.com/osappstatus'),
    '#options' => [
      'attributes' => [
        'target' => '_blank',
        'class' => 'twitter',
      ],
    ],
  ];
  $vars['links'][$last_key] = $last_item;
}

/**
 * Implements hook_theme().
 */
function os_widgets_theme($existing, $type, $theme, $path) {
  return [
    'os_widgets_addthis_buttons' => [
      'variables' => [
        'image_path' => NULL,
      ],
    ],
    'os_widgets_addthis_toolbox_small' => [
      'variables' => [],
    ],
    'os_widgets_addthis_toolbox_large' => [
      'variables' => [],
    ],
    'os_widgets_addthis_numeric' => [
      'variables' => [],
    ],
    'os_widgets_addthis_counter' => [
      'variables' => [],
    ],
    'os_widgets_addthis_field_description' => [
      'variables' => [
        'image_base_path' => NULL,
      ],
    ],
    'os_widgets_twitter_pull' => [
      'variables' => [
        'tweets' => [],
        'is_follow_me' => FALSE,
        'follow_me_link' => '',
      ],
    ],
    'os_widgets_publication_types' => [
      'variables' => [
        'types' => [],
        'is_display_count' => FALSE,
        'pager' => '',
      ],
    ],
    'os_widgets_taxonomy_term_item' => [
      'variables' => [
        'term' => NULL,
        'label' => '',
        'description' => '',
        'children' => [],
      ],
    ],
    'os_widgets_taxonomy_display_type_menu' => [
      'variables' => [
        'items' => [],
        'title' => '',
        'list_type' => NULL,
        'wrapper_attributes' => [],
        'attributes' => [],
        'empty' => NULL,
        'context' => [],
        'children' => [],
      ],
    ],
    'os_widgets_taxonomy_display_type_slider' => [
      'variables' => [
        'items' => [],
        'title' => '',
        'list_type' => NULL,
        'wrapper_attributes' => [],
        'attributes' => [],
        'empty' => NULL,
        'context' => [],
        'children' => [],
      ],
    ],
    'field__block_content__field_widgets__widget_collection' => [
      'variables' => [
        'items' => [],
        'render_style' => '',
      ],
    ],
    'os_widgets_follow_me' => [
      'variables' => [
        'profile_links' => [],
        'display_social' => NULL,
        'rss_feed' => NULL,
      ],
    ],
    'os_widgets_mailchimp_link' => [
      'variables' => [
        'widget_title' => '',
        'subscribe_text' => '',
        'link_url' => '',
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_os_widgets_taxonomy_display_type_menu(&$variables) {
  template_preprocess_item_list($variables);
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_os_widgets_taxonomy_display_type_slider(&$variables) {
  template_preprocess_item_list($variables);
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_field__block_content__field_widgets__widget_collection(&$vars) {
  $vars['render_style'] = $vars['element']['#render_style'];
  $keys = Element::children($vars['element']);
  $vars['items'] = array_intersect_key($vars['element'], array_flip($keys));
  $vars['titles'] = [];
  $vars['id'] = $vars['element']['#object']->id();
  foreach ($vars['items'] as $k => $i) {
    /** @var \Drupal\block_content\BlockContentInterface $bc */
    $bc = $i['#block_content'];
    /** @var \Drupal\block\Entity\Block[] $instances */
    $instances = $bc->getInstances();
    $block = reset($instances);
    $vars['items'][$k] = \Drupal::service('renderer')->render(\Drupal::entityTypeManager()->getViewBuilder('block')->view($block));
    $vars['titles'][$k] = $bc->label();
  }
}

/**
 * Implements hook_block_content_presave().
 */
function os_widgets_block_content_presave(EntityInterface $entity) {
  Cache::invalidateTags([$entity->getVsiteCacheTag()]);
}

/**
 * Implements hook_form_alter().
 */
function os_widgets_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\block_content\BlockContentForm $form_object */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof BlockContentForm && $entity = $form_object->getEntity()) {
    $entity_type_id = $entity->getEntityTypeId();
    if ($entity_type_id == 'block_content') {
      /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bunlde_info */
      $entity_type_bunlde_info = \Drupal::service('entity_type.bundle.info');
      $bundles = $entity_type_bunlde_info->getBundleInfo($entity_type_id);
      // Override form title value.
      $form['#title'] = t('Add new "%widget" Widget', ['%widget' => $bundles[$entity->bundle()]['label']]);
      // Override entity label.
      $form['info']['widget'][0]['value']['#title'] = t('Widget Description');
      $form['info']['widget'][0]['value']['#description'] = t('A brief description of the widget. Only displayed in the Layout section.');
    }
  }

  switch ($form_id) {
    case 'block_content_twitter_feed_form':
    case 'block_content_twitter_feed_edit_form':
      $form['field_twitter_followme_link']['#states'] = [
        'visible' => [
          ':input[name="field_twitter_is_followme_link[value]"]' => [
            'checked' => TRUE,
          ],
        ],
      ];
      break;

    case 'block_content_taxonomy_form':
    case 'block_content_taxonomy_edit_form':
      $form['field_taxonomy_vocabulary']['widget']['#ajax'] = [
        'callback' => 'os_widgets_field_taxonomy_vocabulary_ajax',
        'event' => 'change',
      ];
      $form['field_taxonomy_bundle']['#states'] = [
        'visible' => [
          ':input[name="field_taxonomy_behavior"]' => [
            'value' => 'select',
          ],
        ],
      ];
      $form['field_taxonomy_tree_depth']['#states'] = [
        'visible' => [
          ':input[name="field_taxonomy_show_children[value]"]' => [
            'checked' => TRUE,
          ],
        ],
      ];
      if (!empty($form['field_taxonomy_vocabulary']['widget']['#default_value'][0])) {
        /** @var \Drupal\cp_taxonomy\CpTaxonomyHelperInterface $taxonomy_helper */
        $taxonomy_helper = Drupal::service('cp.taxonomy.helper');
        $vid = $form['field_taxonomy_vocabulary']['widget']['#default_value'][0];
        $settings = $taxonomy_helper->getVocabularySettings($vid);

        _os_widgets_taxonomy_filter_bundle_options($form, $settings['allowed_vocabulary_reference_types']);
      }
      $form['field_taxonomy_display_type']['widget']['description']['#markup'] = t('<div>@help_text</div>', [
        '@help_text' => 'Each taxonomy term must have its own description (see the term creation/edit form). Also, the Show term descriptions checkbox above must be checked, and the Show child terms checkbox above must be unchecked.',
      ]);
      $form['field_taxonomy_display_type']['widget']['description']['#weight'] = 2;
      break;

    case 'block_content_rss_feed_form':
    case 'block_content_rss_feed_edit_form':
      $form['field_content_to_display']['#states'] = [
        'visible' => [
          ':input[name="field_is_show_all_content[value]"]' => [
            'checked' => FALSE,
          ],
        ],
      ];
      break;

    case 'block_content_publication_types_form':
    case 'block_content_publication_types_edit_form':
      $form['field_types_whitelist']['widget']['#options'][''] = t('Select all');
      ksort($form['field_types_whitelist']['widget']['#options']);
      $form['field_types_whitelist']['widget']['description']['#markup'] = t('<div class="description full">@help_text</div>', [
        '@help_text' => 'Select the types you want to appear in the widget.',
      ]);
      $form['field_types_whitelist']['widget']['description']['#weight'] = 2;

      break;

    case 'block_content_addthis_form':
    case 'block_content_addthis_edit_form':
      $form['addthis_description']['#markup'] = \Drupal::token()->replace('[os_widgets:addthis_display_style_description]');
      break;
  }
}

/**
 * Ajax callback handler for field_taxonomy_vocabulary.
 */
function os_widgets_field_taxonomy_vocabulary_ajax(array &$form, FormStateInterface $form_state) {
  $selected_vocabulary = $form_state->getValue('field_taxonomy_vocabulary');
  /** @var \Drupal\cp_taxonomy\CpTaxonomyHelperInterface $taxonomy_helper */
  $taxonomy_helper = Drupal::service('cp.taxonomy.helper');
  $vid = $selected_vocabulary[0]['target_id'] ?? '';
  $settings = $taxonomy_helper->getVocabularySettings($vid);

  $saved_entity_types = $settings['allowed_vocabulary_reference_types'];
  foreach ($saved_entity_types as $entity_key) {
    if ($entity_key == 'node:events') {
      $saved_entity_types[] = 'node:past_events';
      $saved_entity_types[] = 'node:upcoming_events';
    }
  }

  if (empty($saved_entity_types)) {
    return _os_widgets_create_form_taxonomy_bundle_ajax_response($form);
  }
  _os_widgets_taxonomy_filter_bundle_options($form, $saved_entity_types);
  return _os_widgets_create_form_taxonomy_bundle_ajax_response($form);
}

/**
 * Check and remove from bundle options depend on entity bundles.
 *
 * @param array $form
 *   Form array.
 * @param array $saved_entity_types
 *   Array of selectable entity bundles.
 */
function _os_widgets_taxonomy_filter_bundle_options(array &$form, array $saved_entity_types): void {
  if (empty($saved_entity_types)) {
    return;
  }
  foreach ($form['field_taxonomy_bundle']['widget']['#options'] as $key => $option) {
    if ($key == '_none') {
      continue;
    }
    if (!in_array($key, $saved_entity_types)) {
      unset($form['field_taxonomy_bundle']['widget']['#options'][$key]);
    }
  }
}

/**
 * Create an AjaxResponse and add command to rebuild taxonomy bundle element.
 */
function _os_widgets_create_form_taxonomy_bundle_ajax_response($form) {
  $renderer = \Drupal::service('renderer');
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('.form-item-field-taxonomy-bundle', $renderer->render($form['field_taxonomy_bundle']['widget'])));
  return $response;
}

/**
 * Collect all content types in array.
 *
 * @return array
 *   Collected array used by checkboxes in field.
 */
function os_widgets_field_taxonomy_bundle_allowed_values() {
  /** @var \Drupal\cp_taxonomy\CpTaxonomyHelperInterface $taxonomy_helper */
  $taxonomy_helper = Drupal::service('cp.taxonomy.helper');
  $bundles = $taxonomy_helper->getSelectableBundles();
  foreach (array_keys($bundles) as $bundle_name) {
    if ($bundle_name == 'node:events') {
      $bundles['node:past_events'] = t('Past events');
      $bundles['node:upcoming_events'] = t('Upcoming events');
    }
  }
  return $bundles;
}

/**
 * Return options of field content to display checkboxes.
 */
function os_widgets_field_content_to_display_allowed_values() {
  $types = Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->loadMultiple();
  $options = [];
  foreach ($types as $machine_name => $type) {
    $options[$machine_name] = $type->label();
  }
  // Add extra key to merge os_reference_feed into feeds.
  $options['all_publications'] = t('Publications');
  asort($options);
  return $options;
}

/**
 * Collect all bibcite reference types in array.
 *
 * @return array
 *   Collected array used by checkboxes in field.
 */
function os_widgets_field_types_whitelist_allowed_values() {
  $bundle_info = Drupal::service('entity_type.bundle.info')->getBundleInfo('bibcite_reference');
  if (empty($bundle_info)) {
    return [];
  }
  $reference_types = [];
  foreach ($bundle_info as $machine_name => $bundle) {
    $reference_types[$machine_name] = $bundle['label'];
  }
  return $reference_types;
}

/**
 * Implements hook_views_post_render().
 */
function os_widgets_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'os_feeds') {
    $type_arg = $view->args[0] ?? '';
    $type_arg_array = explode('+', $type_arg);
    if (in_array('all_publications', $type_arg_array)) {
      $view_reference_feed = Views::getView('os_reference_feed');
      $view_reference_feed->execute('feed_1');
      $view_reference_feed->preview();

      // Nothing to merge.
      if (empty($view_reference_feed->result)) {
        return;
      }

      /** @var \Drupal\os_widgets\Helper\RssHelper $rss_helper */
      $rss_helper = Drupal::service('os_widgets.rss_helper');
      $rss_helper->setOriginalView($view);
      $rss_helper->setReferenceView($view_reference_feed);
      $rss_helper->setOutput($output);
      $original_view_order = $rss_helper->getOriginalViewOrder();
      $reference_view_order = $rss_helper->getReferenceViewOrder();

      $rss_helper->mergeRows($original_view_order, $reference_view_order);
      $output = $rss_helper->getOutput();
    }
  }
}

/**
 * Implements hook_display_variant_plugin_alter().
 */
function os_widgets_display_variant_plugin_alter(&$plugins) {
  if (isset($plugins['block_place_page'])) {
    $plugins['block_place_page']['class'] = PlaceBlockPageVariant::class;
  }
}

/**
 * Implements hook_form_block_content_form_alter().
 */
function os_widgets_form_block_content_form_alter(&$form, FormStateInterface &$form_state) {
  if (\Drupal::request()->isXmlHttpRequest()) {
    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity->isNew()) {
      $form['actions']['submit']['#ajax'] = [
        'callback' => '\Drupal\os_widgets\Controller\WidgetLibraryController::ajaxSubmitSave',
      ];
    }
    else {
      $form['actions']['submit']['#ajax'] = [
        'callback' => '\Drupal\os_widgets\Controller\WidgetLibraryController::ajaxSubmitEdit',
      ];
    }
    $delete_button_classes = array_merge($form['actions']['delete']['#attributes']['class'], [
      'btn',
      'btn-danger',
      'use-ajax',
    ]);
    $form['actions']['delete']['#attributes']['class'] = $delete_button_classes;
    $form['actions']['delete']['#attributes']['data-dialog-type'] = 'modal';
    $form['actions']['delete']['#icon'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => '',
      '#attributes' => [
        'class' => ['icon', 'glyphicon', 'glyphicon-trash'],
        'aria-hidden' => 'true',
      ],
    ];
  }
}

/**
 * Implements hook_form_block_content_form_alter().
 */
function os_widgets_form_block_content_confirm_form_alter(&$form, FormStateInterface $form_state) {
  if (\Drupal::request()->isXmlHttpRequest()) {
    $form['actions']['submit']['#ajax'] = [
      'callback' => '\Drupal\os_widgets\Controller\WidgetLibraryController::ajaxDelete',
    ];
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function os_widgets_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#links']['block-contentblock-edit'])) {
    $element['#links']['block-contentblock-edit']['attributes'] = [
      'class' => ['use-ajax'],
      'data-dialog-type' => 'modal',
    ];
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function os_widgets_toolbar_alter(&$items) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContextManager */
  $vsiteContextManager = \Drupal::service('vsite.context_manager');
  $items['block_place']['#cache']['contexts'][] = 'group_membership.roles.permissions';

  if ($vsite = $vsiteContextManager->getActiveVsite()) {
    // Remove on Admin routes.
    $admin_route = \Drupal::service('router.admin_context')->isAdminRoute();
    // Remove on Block Demo page.
    $admin_demo = \Drupal::routeMatch()->getRouteName() === 'block.admin_demo';
    if ($membership = $vsite->getMember(\Drupal::currentUser())) {

      $items['block_place']['tab']['#access'] = ((\Drupal::currentUser()->hasPermission('administer blocks') || $membership->hasPermission('manage layout')) && !$admin_demo && !$admin_route);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_follow_me_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_follow_me_block_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_follow_me_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_follow_me_block_form($form, $form_state);
}

/**
 * Performs form alterations in follow_me block content type forms.
 *
 * @param mixed $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function os_widgets_alter_follow_me_block_form(&$form, FormStateInterface $form_state) {
  $domains = os_follow_default_networks();
  $domain_list = [];
  foreach ($domains as $d) {
    $domain_list[] = $d['title'];
  }

  $form['#tree'] = TRUE;
  $form['#attributes'] = ['class' => ['os-follow-me-form']];

  // Add profile url.
  $form['add'] = [
    '#type' => 'fieldset',
    '#title' => t('Add New Profile'),
    'add_profile_url' => [
      '#type' => 'textfield',
      '#title' => t('Profile URL'),
      '#description' => t('Enter the URL of your profile on a social media site. Accepted sites are: @domains', ['@domains' => implode(', ', $domain_list)]),
      '#suffix' => t('<input type="button" class="add_new" value="@add" />', ['@add' => "Add"]),
      '#attributes' => ['id' => 'edit-link-to-add'],
    ],
    '#weight' => 3,
  ];

  // URL links.
  $form['links'] = [
    '#type' => 'markup',
    '#tree' => TRUE,
    '#weight' => 3,
    '#pre_render' => ['os_follow_me_table'],
  ];

  $form['field_links']['#access'] = FALSE;
  $links = &$form['links'];

  // Get all links.
  $all_links = os_widgets_get_profile_url_links($form_state->getFormObject()->getEntity());
  foreach ($all_links['links'] as $k => $v) {
    $n = [
      'text' => [
        '#type' => 'markup',
        '#markup' => '<div class="rrssb no-label"><ul class="rrssb-buttons"><li class="rrssb-' . $v['domain'] . '"><a><span class="rrssb-icon"></span><span class="rrssb-text"></span></a></li></ul></div><a href="#" class="remove" title="Remove Link">Remove</a>',
      ],
      'domain' => [
        '#type' => 'hidden',
        '#default_value' => $v['domain'],
      ],
      'title' => [
        '#type' => 'hidden',
        '#default_value' => $v['title'],
      ],
      'weight' => [
        '#type' => 'textfield',
        '#default_value' => $v['weight'],
        '#size' => 3,
        '#attributes' => [
          'class' => [(string) $k != 'blank' ? 'field-weight' : 'default-weight'],
        ],
      ],
    ];
    $links[$k] = $n;
  }
  $form['count'] = [
    '#type' => 'hidden',
    '#default_value' => count($all_links['links']) - 1,
  ];
  $form['actions']['submit']['#submit'][] = 'follow_me_submit_form';
  $form['#attached']['library'][] = 'os_widgets/followMe';
  $form['#attached']['drupalSettings']['follow_networks'] = $domains;
}

/**
 * Custom submit for follow me form.
 */
function follow_me_submit_form($form, FormStateInterface &$form_state) {

  $profile_links = $form_state->getUserInput();
  unset($profile_links['links']['blank']);
  foreach ($form_state->getFormObject()->getEntity()->get('field_links')->getValue() as $value) {
    if ($value['target_id']) {
      $entity = Paragraph::load($value['target_id']);
      $entity->delete();
    }
  }
  if ($profile_links['links']) {
    // Create the Paragraph with fields.
    $paragraph_items = [];
    foreach ($profile_links['links'] as $values) {
      if ($values['domain'] && $values['title']) {
        $paragraph = Paragraph::create(['type' => 'follow_me_links']);
        $paragraph->set('field_domain', $values['domain']);
        $paragraph->set('field_link_title', $values['title']);
        $paragraph->set('field_weight', $values['weight']);
        $paragraph->save();
        // Then attach a new Paragraph to the Config page entity.
        $paragraph_items[] = [
          'target_id' => $paragraph->id(),
          'target_revision_id' => $paragraph->getRevisionId(),
        ];
      }
    }

    $entity = $form_state->getFormObject()->getEntity();
    $entity->set('field_links', $paragraph_items);
    // Save the entire entity.
    $entity->save();
  }
}

/**
 * Renders the list of links as a table.
 */
function os_follow_me_table($element) {
  // Render the form as a table.
  $rows = [];
  foreach (Element::children($element) as $c) {

    $rows[] = [
      'data' => [
        \Drupal::service('renderer')->render($element[$c]['text']),
        \Drupal::service('renderer')->render($element[$c]['domain']),
        \Drupal::service('renderer')->render($element[$c]['title']),
        \Drupal::service('renderer')->render($element[$c]['weight']),
      ],
      'class' => [(string) $c != 'blank' ? 'draggable' : ''],
    ];
  }

  $element['#headers'] = [];
  $element['#attributes'] = ['id' => 'follow-links-list'];
  $element['#rows'] = $rows;
  $element['#sticky'] = FALSE;
  $element['#empty'] = TRUE;
  $element['#theme'] = 'table';

  drupal_attach_tabledrag($element, [
    'table_id' => 'follow-links-list',
    'action' => 'order',
    'relationship' => 'sibling',
    'group' => 'field-weight',
  ]);
  return $element;
}

/**
 * Retrieves the default networks available.
 *
 * @return array
 *   An associative array, keyed by the machine name. The values are an array
 *   including title of the network, along with the domain to be used for
 *   input validation of the network.
 */
function os_follow_default_networks() {
  $networks = [
    'facebook'  => [
      'title' => t('Facebook'),
      'domain' => 'facebook.com',
      'offset' => 531,
    ],
    'virb' => [
      'title' => t('Virb'),
      'domain' => 'virb.com',
      'offset' => 142,
    ],
    'myspace' => [
      'title' => t('MySpace'),
      'domain' => 'myspace.com',
      'offset' => 290,
    ],
    'twitter' => [
      'title' => t('Twitter'),
      'domain' => 'twitter.com',
      'offset' => 189,
    ],
    'google_photos' => [
      'title' => t('Google Photos'),
      'domain' => 'photos.google.com',
      'offset' => 676,
    ],
    'flickr' => [
      'title' => t('Flickr'),
      'domain' => 'flickr.com',
      'offset' => 483,
    ],
    'youtube' => [
      'title' => t('YouTube'),
      'domain' => 'youtube.com',
      'offset' => 94,
    ],
    'vimeo' => [
      'title' => t('Vimeo'),
      'domain' => 'vimeo.com',
      'offset' => 47,
    ],
    'lastfm' => [
      'title' => t('last.fm'),
      'domain' => 'last.fm',
      'offset' => 389,
    ],
    'linkedin' => [
      'title' => t('LinkedIn'),
      'domain' => 'linkedin.com',
      'offset' => 340,
    ],
    'delicious' => [
      'title' => t('Delicious'),
      'domain' => 'del.icio.us',
      'offset' => 579,
    ],
    'tumblr' => [
      'title' => t('Tumblr'),
      'domain' => 'tumblr.com',
      'offset' => 241,
    ],
    'pinterest' => [
      'title' => t('Pinterest'),
      'domain' => 'pinterest.com',
      'offset' => 0,
    ],
    'instagram' => [
      'title' => t('Instagram'),
      'domain' => 'instagram.com',
      'offset' => 630,
    ],
    'soundcloud' => [
      'title' => t('soundcloud'),
      'domain' => 'soundcloud.com',
      'offset' => 436,
    ],
    'googleplus' => [
      'title' => t('Google+'),
      'domain' => 'plus.google.com',
      'offset' => 722,
    ],
  ];
  return $networks;

}

/**
 * Get all profile url links.
 *
 * @param mixed $entity
 *   Block entity.
 *
 * @return array
 *   Links array.
 */
function os_widgets_get_profile_url_links($entity) {
  $links = [];
  $block = $entity->get('field_links')->getValue();

  $links['links']['blank'] = [
    'title' => '__blank__',
    'domain' => '',
    'weight' => 2000000,
  ];

  foreach ($block as $value) {
    if ($value['target_id']) {
      $paragraph = Paragraph::load($value['target_id']);

      if ($paragraph) {
        $profile_links = [
          'domain' => $paragraph->get('field_domain')->getString(),
          'title' => $paragraph->get('field_link_title')->getString(),
          'weight' => $paragraph->get('field_weight')->getString(),
        ];
        $links['links'][] = $profile_links;
      }
    }
  }
  return $links;
}

/**
 * Alter field mailing_list options - Mailchimp subscription block type.
 *
 * Setting field options if mailchimp apikey exists for a Vsite, this function
 * is called from field_storage YAML settings.
 */
function os_widgets_field_mailing_list_options() {
  $options = [];
  $mailchimp_config = \Drupal::config('mailchimp.settings');
  $mailchimpService = \Drupal::service('os_mailchimp.lists');
  $api_key = $mailchimp_config->get('api_key');

  if (!empty($api_key)) {
    $lists = $mailchimpService->osMailchimpGetLists($api_key);
    $options = $mailchimpService->mailChimpListsToOptions($lists);
  }

  return $options;
}

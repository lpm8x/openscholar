<?php

/**
 * @file
 * OS redirect to source module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\redirect\Entity\Redirect;

/**
 * Implements hook_entity_insert().
 */
function os_redirect_to_source_entity_insert(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ($type === 'node' || $type === 'bibcite_reference') {
    _os_redirect_to_source_update_entity_redirect($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function os_redirect_to_source_entity_update(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ($type === 'node' || $type === 'bibcite_reference') {
    _os_redirect_to_source_update_entity_redirect($entity);
  }
}

/**
 * Update node redirect.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The node.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _os_redirect_to_source_update_entity_redirect(EntityInterface $entity) {
  if (!$entity->hasField('field_redirect_to_source')) {
    return;
  }
  $path = ($entity->getEntityTypeId() === 'bibcite_reference') ? 'bibcite/reference/' : 'node/';

  $redirectUri = _os_redirect_to_source_get_redirect_uri($entity);
  $redirect = _os_redirect_to_source_get_entity_redirect_entity($entity, $path);

  if (!empty($redirect)) {
    $redirectUrl = $redirect->getRedirectUrl();
    // Delete exists redirect.
    if (empty($redirectUri)) {
      $redirect->delete();
      return;
    }
    if ($redirectUrl->getUri() != $redirectUri) {
      // Update with new field value.
      $redirect->setRedirect($redirectUri);
      $redirect->save();
      return;
    }
    // Nothing changed.
    return;
  }
  // If not exists, then create a new redirect.
  if (!empty($redirectUri)) {
    $redirect = Redirect::create();
    $redirect->setSource($path . $entity->id());
    $redirect->setRedirect($redirectUri);
    $redirect->setLanguage(Language::LANGCODE_NOT_SPECIFIED);
    $redirect->setStatusCode(307);
    $redirect->save();
  }
}

/**
 * Update node redirect entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The node.
 *
 * @return \Drupal\redirect\Entity\Redirect
 *   The redirect.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _os_redirect_to_source_get_entity_redirect_entity(EntityInterface $entity, $path) {
  $language = Language::LANGCODE_NOT_SPECIFIED;
  $hash = Redirect::generateHash($path . $entity->id(), [], $language);

  // Search for duplicate.
  $redirects = \Drupal::entityTypeManager()
    ->getStorage('redirect')
    ->loadByProperties(['hash' => $hash]);

  if (empty($redirects)) {
    return NULL;
  }

  /** @var \Drupal\redirect\Entity\Redirect $redirect */
  $redirect = array_shift($redirects);
  return $redirect;
}

/**
 * Returns node redirect URI.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The node.
 *
 * @return string
 *   The URI.
 */
function _os_redirect_to_source_get_redirect_uri(EntityInterface $entity) {
  if (!$entity->hasField('field_redirect_to_source')) {
    return '';
  }
  $urlItemList = $entity->get('field_redirect_to_source');
  if (empty($urlItemList)) {
    return '';
  }
  $urlValues = $urlItemList->getValue();

  return !empty($urlValues[0]['uri']) ? $urlValues[0]['uri'] : '';
}

/**
 * Implements hook_entity_delete().
 */
function os_redirect_to_source_entity_delete(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ($type === 'node' || $type === 'bibcite_reference') {
    $path = ($type === 'bibcite_reference') ? 'bibcite/reference/' : 'node/';
    $redirectUri = _os_redirect_to_source_get_redirect_uri($entity);
    if (!empty($redirectUri)) {
      $redirect = _os_redirect_to_source_get_entity_redirect_entity($entity, $path);
      if (!empty($redirect)) {
        $redirect->delete();
      }
    }
  }

}

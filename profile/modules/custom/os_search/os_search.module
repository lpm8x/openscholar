<?php

/**
 * @file
 * Hook implementations for the os_search module.
 */

use Drupal\search_api\Query\QueryInterface;

/**
 * Implements hook_search_api_query_alter().
 */
function os_search_search_api_query_alter(QueryInterface &$query) {
  $group_context = \Drupal::service('vsite.context_manager');
  $group = $group_context->getActiveVsite();

  // Load grouped content if search belongs to vsite.
  if ($group) {
    $group_id = $group->id();
    $query->addCondition('custom_search_group', $group_id, '=');
  }

  // Add unreal condition to remove default search results from global search.
  if (!$group && !$query->getKeys()) {
    $query->addCondition('custom_search_group', 0, '=');
  }

  // Allow enabled Apps only.
  $app_loader = \Drupal::service('os_app_access.app_loader');
  $current_user = \Drupal::currentUser();
  $enabled_apps = $app_loader->getAppsForUser($current_user);

  $enabled_apps_list = [];

  foreach ($enabled_apps as $enabled_app) {
    if (isset($enabled_app['bundle'])) {
      $enabled_apps_list = array_merge($enabled_apps_list, $enabled_app['bundle']);
    }
    else {
      $enabled_apps_list[] = $enabled_app['entityType'];
    }
  }

  if ($enabled_apps_list) {
    $query->addCondition('custom_search_bundle', $enabled_apps_list, 'IN');
  }

  // Get the sort url parameter.
  $sort = \Drupal::request()->query->get('sort');
  if ($sort) {
    handle_sort($query, $sort);
  }

}

/**
 * Handles search sort parameters.
 *
 * @param Drupal\search_api\Query\QueryInterface $query
 *   Search api query to be altered.
 * @param string $sort
 *   Url sort argument.
 */
function handle_sort(QueryInterface &$query, $sort) {

  switch ($sort) {
    case 'title-asc':
      $query->sort('custom_title');
      break;

    case 'title-desc':
      $query->sort('custom_title', 'DESC');
      break;

    default:
      break;
  }
}
